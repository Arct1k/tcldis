!function(){"use strict";var e=80,t=50,a=1.25,n=12*a,s=37,i=38,l=39,c=40,o=function(){alert("Must define getInitialCode and getDecompileSteps globally")};window.getInitialCode=window.getInitialCode||o,window.getDecompileSteps=window.getDecompileSteps||o;var r=React.createClass({displayName:"ActionArea",getInitialState:function(){return window.getInitialCode(function(e,t){this.setState({code:t}),setTimeout(this.onDecompileClick,0)}.bind(this)),{code:""}},handleChange:function(e){this.setState({code:e.target.value})},onDecompileClick:function(){this.props.decompileCB(this.state.code)},onHelpButtonToggle:function(){this.setState({helpVisible:!this.state.helpVisible})},render:function(){var e=function(e){return function(){var t=new Event("keydown");t.keyCode=e,document.dispatchEvent(t)}};return this.state.helpVisible?React.createElement("div",{id:"helparea"},React.createElement("div",{style:{"max-width":"800px",margin:"0 auto"}},React.createElement("button",{id:"helpbutton",onClick:this.onHelpButtonToggle},"Hide Info"),React.createElement("span",{className:"commentary"},React.createElement("u",null,"What is it?"),React.createElement("br",null),"TclDis was created when I was learning about Tcl bytecode. I'm fairly interested in decompilers so decided to to create a tool that (I believe) didn't exist, which would take some Tcl bytecode and output the Tcl code that compiled to it. I assume the only reason it's never been done for Tcl is the size of the community - both Python and Java have a number of tools like TclDis.",React.createElement("p",null),React.createElement("u",null,"Where's the code?"),React.createElement("br",null),"On ",React.createElement("a",{href:"https://github.com/aidanhs/tcldis/"},"GitHub"),". Decompilation happens in a single ~1000 line Python file. C is used to extract information from the Tcl interpreter, and could be mostly replaced with `",React.createElement("span",{className:"code"},React.createElement("a",{href:"http://wiki.tcl.tk/40936"},"getbytecode")),"` (which didn't exist when tcldis was created). React and JavaScript is used to create this web interface.",React.createElement("br",null),"It's worth noting that the decompliation works based on patterns. This is a very simple (but inflexible) method of decompliation and becomes a pain when optimisers get clever and move instructions around.",React.createElement("p",null),React.createElement("u",null,"https://aidanhs.github.io/tcldis loads very slowly!"),React.createElement("br",null),"Because TclDis uses Python, Tcl and C, it would usually be a server side application. But I wanted to host the whole project on GitHub pages with no external dependencies. By combining three of my other projects (",React.createElement("a",{href:"https://github.com/aidanhs/libtclpy"},"libtclpy"),", ",React.createElement("a",{href:"https://github.com/aidanhs/empython"},"empython")," and ",React.createElement("a",{href:"https://github.com/aidanhs/emtcl"},"emtcl"),") and ",React.createElement("a",{href:"https://github.com/kripken/emscripten"},"Emscripten")," in a very ",React.createElement("a",{href:"https://github.com/aidanhs/tcldis/blob/gh-pages/script.sh"},"particular")," way, you get a Tcl decompiler in pure JS. Why so slow? You're actually running full Tcl and Python interpreters in the browser!",React.createElement("br",null),"It's probably worth repeating that - Emscripten allows you to put together a Python and Tcl interpreter, a C extension to let them talk to each other, the entire Python standard library and the TclDis code itself in under 12MB. I think that's pretty good.",React.createElement("br",null),"If you want to play with this, run:",React.createElement("br",null),React.createElement("span",{className:"code"},"empython.eval('import tclpy');",React.createElement("br",null),"empython.eval('tclpy.eval(\"puts [list 1 2 3]\")');"),React.createElement("br",null),"in your JavaScript console.",React.createElement("p",null),React.createElement("u",null,"There's a bug! Will you fix it?"),React.createElement("br",null),"If causes a crash, possibly. Otherwise (e.g. recognising new instructions) probably not.",React.createElement("p",null),React.createElement("u",null,"Can I decompile .tbc files?"),React.createElement("br",null),"In theory, but no support will be offered."))):React.createElement("div",{id:"actionarea"},React.createElement("div",null,React.createElement("div",{id:"directionbuttons"},React.createElement("button",{onClick:e(s),style:{width:"35%",left:"0",top:"0",bottom:"0"}},"<"),React.createElement("button",{onClick:e(i),style:{width:"30%",left:"35%",right:"35%",height:"50%",top:"0"}},"^"),React.createElement("button",{onClick:e(c),style:{width:"30%",left:"35%",right:"35%",height:"50%",bottom:"0"}},"v"),React.createElement("button",{onClick:e(l),style:{width:"35%",right:"0",top:"0",bottom:"0"}},">")),React.createElement("div",{style:{textAlign:"center"}},"(you can also use the arrow keys)"),React.createElement("button",{id:"helpbutton",onClick:this.onHelpButtonToggle},"Tell me more about TclDis!"),React.createElement("button",{id:"decompilebutton",onClick:this.onDecompileClick},"Decompile!")),React.createElement("div",null,React.createElement("textarea",{onChange:this.handleChange,value:this.state.code})))}}),p=React.createClass({displayName:"StepPadding",shouldComponentUpdate:function(e,t){return this.props.stepIdx!==e.stepIdx||this.props.steps!==e.steps||this.props.changes!==e.changes||this.props.offsets[0]!==e.offsets[0]||this.props.offsets[1]!==e.offsets[1]},render:function(){function e(e,a,s){var i,l,c,o,r=e,p=r.step,h=a;if("block_join"===r.tag||"block_rm"===r.tag){var m="Internal rearrangement ";m+="block_join"===r.tag?"(bblock joining)":"(bblock elimination)";var d={fontSize:12,fontFamily:"monospace"},u=20,f=-2.5*t+.25*d.fontSize;return[React.createElement("text",{key:1,x:u,y:f,transform:"rotate(90)",style:d},m)]}i=0,l=0,c=0,o=h[p];for(var y,g;;){if(l===r.from[0][0]&&c===r.from[0][1]&&(y=i),l===r.from[1][0]&&c===r.from[1][1]){g=i;break}if(c<o[l].length)i+=o[l][c].split("\n").length,c++;else{if(!(l<o.length-1))throw Error();l++,c=0}}i=0,l=0,c=0,o=h[p+1];for(var b,E;;){if(l===r.to[0][0]&&c===r.to[0][1]&&(b=i),l===r.to[1][0]&&c===r.to[1][1]){E=i;break}if(c<o[l].length)i+=o[l][c].split("\n").length,c++;else{if(!(l<o.length-1))throw Error();l++,c=0}}y=y*n-s[0],g=g*n-s[0],b=b*n-s[1],E=E*n-s[1];var R=t;return[React.createElement("line",{key:1,x1:2*R,y1:y,x2:3*R,y2:b}),React.createElement("line",{key:2,x1:2*R,y1:g,x2:3*R,y2:E}),React.createElement("line",{key:3,x1:0,y1:y,x2:2*R,y2:y,className:"guideLine"}),React.createElement("line",{key:4,x1:0,y1:g,x2:2*R,y2:g,className:"guideLine"}),React.createElement("line",{key:5,x1:3*R,y1:b,x2:5*R,y2:b,className:"guideLine"}),React.createElement("line",{key:6,x1:3*R,y1:E,x2:5*R,y2:E,className:"guideLine"})]}var a=this.props.stepIdx,s=[];return this.props.changes.forEach(function(t){if(t.step===a){var n=React.createElement("g",{key:s.length},e(t,this.props.steps,this.props.offsets));s.push(n)}},this),React.createElement("div",{className:"step-padding"},React.createElement("div",null,React.createElement("svg",null,s)))}}),h=React.createClass({displayName:"DecompileStepCode",shouldComponentUpdate:function(e,t){return this.props.step!==e.step},render:function(){var e=this.props.step;return React.createElement("pre",null,e.map(function(e){return e.join("\n")}).join("\n"))}}),m=React.createClass({displayName:"DecompileSteps",handleKeyDown:function(e){var t=e.keyCode||e.charCode;if(t===s)this.changeStepIdx(-1);else if(t===l)this.changeStepIdx(1);else if(t===i)this.showMiniSteps(!0);else{if(t!==c)return!0;this.showMiniSteps(!1)}return e.preventDefault(),!1},showMiniSteps:function(e){this.setState({miniStepsOnly:e})},changeStepIdx:function(e){var t=this.state.stepIdx+e;if(!(0>t||t>=this.props.steps.length)){var a,n=this.state.stepScroll.slice();for(a=0;e>a;a++)n.splice(0,1),n.push(0);for(a=0;a>e;a--)n.splice(-1,1),n.unshift(0);this.setState({stepIdx:t,stepScroll:n})}},componentDidMount:function(){document.addEventListener("keydown",function(e){return"TEXTAREA"!==e.target.nodeName?this.handleKeyDown(e):void 0}.bind(this))},componentDidUpdate:function(){var e=this.getDOMNode().querySelectorAll("#mainsteps > .step"),t=this.state.stepScroll;[].forEach.call(e,function(e,a){e.children[0].scrollTop=t[a]})},handleScroll:function(e){var t=this.getDOMNode().querySelectorAll("#mainsteps > .step"),a=[].map.call(t,function(e){return e.children[0].scrollTop}),n=this.state.stepScroll;a.some(function(e,t){return e!==n[t]})&&this.setState({stepScroll:a})},componentWillReceiveProps:function(e){this.setState(this.getInitialState())},getInitialState:function(){return{stepIdx:0,stepScroll:[0,0,0],miniStepsOnly:!1}},render:function(){var t=this.state.stepIdx,a=[],n=[];if(this.props.steps.map(function(e,s){var i="step";t===s&&(i+=" selected-step");var l=React.createElement("div",{className:i,key:"step"+s},React.createElement(h,{step:e}));n.push(l),t-1>s||s>t+1||a.push(l)},this),2===a.length){var s;a[0].key!=="step"+(t-1)?(s=React.createElement("span",{className:"commentary"},"On the left is the code to decompile.",React.createElement("br",null),"However, first it must be compiled. Immediately on the right is the result of passing the code to the Tcl bytecode (BC) compiler as a proc body. Lines like `",React.createElement("span",{className:"code"},"<X: text (params)>"),"` are a human-readable representation of each 'instruction' produced by the BC compiler - on execution they'd be run by the Tcl BC interpreter in a ",React.createElement("a",{href:"http://en.wikipedia.org/wiki/Stack_machine"},"stack machine"),", somewhat like Java (and Python).",React.createElement("p",null),"For example, `",React.createElement("span",{className:"code"},"<30: push1 (2)>"),"` will push the second value from the 'literals array' onto the stack. If you're interested in learning more, `",React.createElement("a",{href:"https://github.com/tcltk/tcl/blob/core_8_5_16/generic/tclCompile.c#L41"},React.createElement("span",{className:"code"},"tclCompile.h")),"` has a list of BC instructions and `",React.createElement("a",{href:"https://github.com/tcltk/tcl/blob/core_8_5_16/generic/tclCompile.h#L345"},React.createElement("span",{className:"code"},"tclCompile.c")),"` details what a 'bytecode' structure looks like.",React.createElement("p",null),"When you move across, you can see `",React.createElement("span",{className:"code"},"tcldis"),"` at work turning the BC instructions back into readable Tcl code. Anything marked with `",React.createElement("span",{className:"code"},"»"),"` represents a value on the stack, i.e. it still needs to be 'consumed' by something.",React.createElement("br",null),"The ministeps view (up and down) is just a zoomed out way of seeing how decompilation progresses.",React.createElement("p",null),"Note: `",React.createElement("span",{className:"code"},"tcldis"),"` is not complete! It recognises a limited set of patterns for a limited set of instructions and is developed against a single version of Tcl. However, it does have a set of ",React.createElement("a",{href:"https://github.com/aidanhs/tcldis/blob/master/tests/test.py"},"test cases")," which are verified as being decompilable."),a.unshift(React.createElement("div",{className:"step",key:"step"+(t-1)},s))):a[1].key!=="step"+(t+1)&&(s=React.createElement("span",{className:"commentary"},"Your decompiled (as much as possible) code is on the left.",React.createElement("br",null)),a.push(React.createElement("div",{className:"step",key:"step"+(t+1)},s)))}a.splice(1,0,React.createElement(p,{key:"pad"+(t-1),stepIdx:t-1,steps:this.props.steps,changes:this.props.changes,offsets:this.state.stepScroll.slice(0,2)})),a.splice(3,0,React.createElement(p,{key:"pad"+t,stepIdx:t,steps:this.props.steps,changes:this.props.changes,offsets:this.state.stepScroll.slice(1,3)}));var i=this.state.miniStepsOnly?{height:0,opacity:0}:{},l=-(t*e+e/2),c={left:l+"px"};return React.createElement("div",{id:"stepsarea"},React.createElement("div",{id:"mainsteps",style:i,onScroll:this.handleScroll},a),React.createElement("div",{id:"ministeps",style:c},n))}});window.TclDisUI=React.createClass({displayName:"TclDisUI",getInitialState:function(){return{steps:[],changes:[]}},getDecompileSteps:function(e){window.getDecompileSteps(e,function(e,t){return e?(alert("Looks like that decompilation failed, see the console for details"),console.log(t),void this.setState(this.getInitialState())):void this.setState(t)}.bind(this))},render:function(){return React.createElement("div",null,React.createElement(r,{decompileCB:this.getDecompileSteps}),React.createElement(m,{steps:this.state.steps,changes:this.state.changes}))}})}();