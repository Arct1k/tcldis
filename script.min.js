!function(){"use strict";var e=function(){alert("Must define getInitialCode and getDecompileSteps globally")};window.getInitialCode=window.getInitialCode||e,window.getDecompileSteps=window.getDecompileSteps||e;var t=React.createClass({displayName:"ActionArea",getInitialState:function(){return window.getInitialCode(function(e,t){this.setState({code:t,gotInitialCode:!0}),setTimeout(this.onDecompileClick,0)}.bind(this)),{code:"",gotInitialCode:!1}},handleChange:function(e){this.setState({code:e.target.value})},onDecompileClick:function(){this.props.decompileCB(this.state.code)},onHelpButtonToggle:function(){this.setState({helpVisible:!this.state.helpVisible})},render:function(){var e=function(t){return function(){var e=new Event("keydown");e.keyCode=t,document.dispatchEvent(e)}};return this.state.helpVisible?React.createElement("div",{id:"helparea"},React.createElement("div",{style:{"max-width":"800px",margin:"0 auto"}},React.createElement("button",{id:"helpbutton",onClick:this.onHelpButtonToggle},"Hide Info"),React.createElement("span",{className:"commentary"},React.createElement("u",null,"What is it?"),React.createElement("br",null),"TclDis was created when I was learning about Tcl bytecode. I'm fairly interested in decompilers so decided to to create a tool that (I believe) didn't exist, which would take some Tcl bytecode and output the Tcl code that compiled to it. I assume the only reason it's never been done for Tcl is the size of the community - both Python and Java have a number of tools like TclDis.",React.createElement("p",null),React.createElement("u",null,"Where's the code?"),React.createElement("br",null),"On ",React.createElement("a",{href:"https://github.com/aidanhs/tcldis/"},"GitHub"),". Decompilation happens in a single ~1000 line Python file. C is used to extract information from the Tcl interpreter, and could be mostly replaced with `",React.createElement("span",{className:"code"},React.createElement("a",{href:"http://wiki.tcl.tk/40936"},"getbytecode")),"` (which didn't exist when tcldis was created). React and JavaScript is used to create this web interface.",React.createElement("br",null),"It's worth noting that the decompliation works based on patterns. This is a very simple (but inflexible) method of decompliation and becomes a pain when optimisers get clever and move instructions around.",React.createElement("p",null),React.createElement("u",null,"https://aidanhs.github.io/tcldis loads very slowly!"),React.createElement("br",null),"Because TclDis uses Python, Tcl and C, it would usually be a server side application. But I wanted to host the whole project on GitHub pages with no external dependencies. By combining three of my other projects (",React.createElement("a",{href:"https://github.com/aidanhs/libtclpy"},"libtclpy"),", ",React.createElement("a",{href:"https://github.com/aidanhs/empython"},"empython")," and ",React.createElement("a",{href:"https://github.com/aidanhs/emtcl"},"emtcl"),") and ",React.createElement("a",{href:"https://github.com/kripken/emscripten"},"Emscripten")," in a very ",React.createElement("a",{href:"https://github.com/aidanhs/tcldis/blob/gh-pages/script.sh"},"particular")," way, you get a Tcl decompiler in pure JS. Why so slow? You're actually running full Tcl and Python interpreters in the browser!",React.createElement("br",null),"It's probably worth repeating that - Emscripten allows you to put together a Python and Tcl interpreter, a C extension to let them talk to each other, the entire Python standard library and the TclDis code itself in under 12.5MB (3.5MB gzipped). I think that's pretty good.",React.createElement("br",null),"If you want to play with this, run:",React.createElement("br",null),React.createElement("span",{className:"code"},"empython.Run('import tclpy');",React.createElement("br",null),"empython.Run('tclpy.eval(\"puts [list 1 2 3]\")');"),React.createElement("br",null),"in your JavaScript console.",React.createElement("p",null),React.createElement("u",null,"There's a bug! Will you fix it?"),React.createElement("br",null),"If causes a crash, possibly. Otherwise (e.g. recognising new instructions) probably not.",React.createElement("p",null),React.createElement("u",null,"Can I decompile .tbc files?"),React.createElement("br",null),"Yes, and the author has done so, but no unpaid support will be offered. Get in touch if you want to discuss other options."))):React.createElement("div",{id:"actionarea"},React.createElement("div",null,React.createElement("div",{id:"directionbuttons"},React.createElement("button",{onClick:e(37),style:{width:"35%",left:"0",top:"0",bottom:"0"}},"<"),React.createElement("button",{onClick:e(38),style:{width:"30%",left:"35%",right:"35%",height:"50%",top:"0"}},"^"),React.createElement("button",{onClick:e(40),style:{width:"30%",left:"35%",right:"35%",height:"50%",bottom:"0"}},"v"),React.createElement("button",{onClick:e(39),style:{width:"35%",right:"0",top:"0",bottom:"0"}},">")),React.createElement("div",{style:{textAlign:"center"}},"(you can also use the arrow keys)"),React.createElement("button",{id:"helpbutton",onClick:this.onHelpButtonToggle},"Tell me more about TclDis!"),React.createElement("button",{id:"decompilebutton",disabled:!this.state.gotInitialCode,onClick:this.onDecompileClick},this.state.gotInitialCode?"Decompile!":"Please wait for initialisation...")),React.createElement("div",null,React.createElement("textarea",{onChange:this.handleChange,value:this.state.code})))}}),n=React.createClass({displayName:"StepPadding",shouldComponentUpdate:function(e,t){return this.props.stepIdx!==e.stepIdx||this.props.steps!==e.steps||this.props.changes!==e.changes||this.props.offsets[0]!==e.offsets[0]||this.props.offsets[1]!==e.offsets[1]},render:function(){var a=this.props.stepIdx,n=[];return this.props.changes.forEach(function(e){if(e.step===a){var t=React.createElement("g",{key:n.length},function(e,t,a){var n,s,i,l,c,o,r,p,h=e,d=h.step,m=t;if("block_join"===h.tag||"block_rm"===h.tag){var u="Internal rearrangement ";u+="block_join"===h.tag?"(bblock joining)":"(bblock elimination)";var f={fontSize:12,fontFamily:"monospace"},g=.25*f.fontSize-125;return[React.createElement("text",{key:1,x:20,y:g,transform:"rotate(90)",style:f},u)]}for(i=s=n=0,l=m[d];;){if(s===h.from[0][0]&&i===h.from[0][1]&&(c=n),s===h.from[1][0]&&i===h.from[1][1]){o=n;break}if(i<l[s].length)n+=l[s][i].split("\n").length,i++;else{if(!(s<l.length-1))throw Error();s++,i=0}}for(i=s=n=0,l=m[d+1];;){if(s===h.to[0][0]&&i===h.to[0][1]&&(r=n),s===h.to[1][0]&&i===h.to[1][1]){p=n;break}if(i<l[s].length)n+=l[s][i].split("\n").length,i++;else{if(!(s<l.length-1))throw Error();s++,i=0}}return c=15*c-a[0],o=15*o-a[0],r=15*r-a[1],p=15*p-a[1],[React.createElement("line",{key:1,x1:100,y1:c,x2:150,y2:r}),React.createElement("line",{key:2,x1:100,y1:o,x2:150,y2:p}),React.createElement("line",{key:3,x1:0,y1:c,x2:100,y2:c,className:"guideLine"}),React.createElement("line",{key:4,x1:0,y1:o,x2:100,y2:o,className:"guideLine"}),React.createElement("line",{key:5,x1:150,y1:r,x2:250,y2:r,className:"guideLine"}),React.createElement("line",{key:6,x1:150,y1:p,x2:250,y2:p,className:"guideLine"})]}(e,this.props.steps,this.props.offsets));n.push(t)}},this),React.createElement("div",{className:"step-padding"},React.createElement("div",null,React.createElement("svg",null,n)))}}),c=React.createClass({displayName:"DecompileStepCode",shouldComponentUpdate:function(e,t){return this.props.step!==e.step},render:function(){var e=this.props.step;return React.createElement("pre",null,e.map(function(e){return e.join("\n")}).join("\n"))}}),a=React.createClass({displayName:"DecompileSteps",handleKeyDown:function(e){var t=e.keyCode||e.charCode;if(37===t)this.changeStepIdx(-1);else if(39===t)this.changeStepIdx(1);else if(38===t)this.showMiniSteps(!0);else{if(40!==t)return!0;this.showMiniSteps(!1)}return e.preventDefault(),!1},showMiniSteps:function(e){this.setState({miniStepsOnly:e})},changeStepIdx:function(e){var t=this.state.stepIdx+e;if(!(t<0||t>=this.props.steps.length)){var a,n=this.state.stepScroll.slice();for(a=0;a<e;a++)n.splice(0,1),n.push(0);for(a=0;e<a;a--)n.splice(-1,1),n.unshift(0);this.setState({stepIdx:t,stepScroll:n})}},componentDidMount:function(){document.addEventListener("keydown",function(e){if("TEXTAREA"!==e.target.nodeName)return this.handleKeyDown(e)}.bind(this))},componentDidUpdate:function(){var e=this.getDOMNode().querySelectorAll("#mainsteps > .step"),a=this.state.stepScroll;[].forEach.call(e,function(e,t){e.children[0].scrollTop=a[t]})},handleScroll:function(e){var t=this.getDOMNode().querySelectorAll("#mainsteps > .step"),a=[].map.call(t,function(e){return e.children[0].scrollTop}),n=this.state.stepScroll;a.some(function(e,t){return e!==n[t]})&&this.setState({stepScroll:a})},componentWillReceiveProps:function(e){this.setState(this.getInitialState())},getInitialState:function(){return{stepIdx:0,stepScroll:[0,0,0],miniStepsOnly:!1}},render:function(){var e,s=this.state.stepIdx,i=[],l=[];(this.props.steps.map(function(e,t){var a="step";s===t&&(a+=" selected-step");var n=React.createElement("div",{className:a,key:"step"+t},React.createElement(c,{step:e}));l.push(n),t<s-1||s+1<t||i.push(n)},this),2===i.length)&&(i[0].key!=="step"+(s-1)?(e=React.createElement("span",{className:"commentary"},"On the left is the code to decompile.",React.createElement("br",null),"However, first it must be compiled. Immediately on the right is the result of passing the code to the Tcl bytecode (BC) compiler as a proc body. Lines like `",React.createElement("span",{className:"code"},"<X: text (params)>"),"` are a human-readable representation of each 'instruction' produced by the BC compiler - on execution they'd be run by the Tcl BC interpreter in a ",React.createElement("a",{href:"http://en.wikipedia.org/wiki/Stack_machine"},"stack machine"),", somewhat like Java (and Python).",React.createElement("p",null),"For example, `",React.createElement("span",{className:"code"},"<30: push1 (2)>"),"` will push the second value from the 'literals array' onto the stack. If you're interested in learning more, `",React.createElement("a",{href:"https://github.com/tcltk/tcl/blob/core_8_5_16/generic/tclCompile.c#L41"},React.createElement("span",{className:"code"},"tclCompile.h")),"` has a list of BC instructions and `",React.createElement("a",{href:"https://github.com/tcltk/tcl/blob/core_8_5_16/generic/tclCompile.h#L345"},React.createElement("span",{className:"code"},"tclCompile.c")),"` details what a 'bytecode' structure looks like.",React.createElement("p",null),"When you move across, you can see `",React.createElement("span",{className:"code"},"tcldis"),"` at work turning the BC instructions back into readable Tcl code. Anything marked with `",React.createElement("span",{className:"code"},"»"),"` represents a value on the stack, i.e. it still needs to be 'consumed' by something.",React.createElement("br",null),"The ministeps view (up and down) is just a zoomed out way of seeing how decompilation progresses.",React.createElement("p",null),"Note: `",React.createElement("span",{className:"code"},"tcldis"),"` is not complete! It recognises a limited set of patterns for a limited set of instructions and is developed against a single version of Tcl. However, it does have a set of ",React.createElement("a",{href:"https://github.com/aidanhs/tcldis/blob/master/tests/test.py"},"test cases")," which are verified as being decompilable."),i.unshift(React.createElement("div",{className:"step",key:"step"+(s-1)},e))):i[1].key!=="step"+(s+1)&&(e=React.createElement("span",{className:"commentary"},"Your decompiled (as much as possible) code is on the left.",React.createElement("br",null)),i.push(React.createElement("div",{className:"step",key:"step"+(s+1)},e))));i.splice(1,0,React.createElement(n,{key:"pad"+(s-1),stepIdx:s-1,steps:this.props.steps,changes:this.props.changes,offsets:this.state.stepScroll.slice(0,2)})),i.splice(3,0,React.createElement(n,{key:"pad"+s,stepIdx:s,steps:this.props.steps,changes:this.props.changes,offsets:this.state.stepScroll.slice(1,3)}));var t=this.state.miniStepsOnly?{height:0,opacity:0}:{},a={left:-(80*s+40)+"px"};return React.createElement("div",{id:"stepsarea"},React.createElement("div",{id:"mainsteps",style:t,onScroll:this.handleScroll},i),React.createElement("div",{id:"ministeps",style:a},l))}});window.TclDisUI=React.createClass({displayName:"TclDisUI",getInitialState:function(){return{steps:[],changes:[]}},getDecompileSteps:function(e){window.getDecompileSteps(e,function(e,t){if(e)return alert("Looks like that decompilation failed, see the console for details"),console.log(t),void this.setState(this.getInitialState());this.setState(t)}.bind(this))},render:function(){return React.createElement("div",null,React.createElement(t,{decompileCB:this.getDecompileSteps}),React.createElement(a,{steps:this.state.steps,changes:this.state.changes}))}})}();
